#+TITLE: Hooks                                                         
#+AUTHOR: VLEAD                                                                   
#+DATE: <2016-12-06 Tue>
                                            
#+Setupfile: ./org-templates/level-0.org                                          
#+TAGS: boilerplate(b)                                                            
#+EXCLUDE_TAGS: boilerplate                                                       
#+OPTIONS: ^:nil

* Introduction
  This code takes input as
1) path to lab directory 
2) path to labSpec.json file of corresponding lab
Lab directory should have following structure
#+BEGIN_EXAMPLE
|--LabDirectory
   |--src
      |--exp1
      |  |--introduction.html
      |  |--objective.html
      |  |--quiz.html
      |  |--theory.html
      |  `--simulation.html
      |--exp2
      |  |--introduction.html
      |  |--objective.html
      |  |--quiz.html
      |   `--theory.html
      |--index.html

#+END_EXAMPLE
This code sends request for id's of lab whose labId is fetched from
labSpec.json and hooks these id's into corresponding html files.


* How to run
following command will run the code
#+BEGIN_EXAMPLE
python add-ids.py $[HOME]/labDirectory $[HOME]/labSpec.json

#+END_EXAMPLE


* Implementation

** Handling Convention
   All non-alphanumeric characters are dropped and spaces are replaced with hyphen
  :PROPERTIES:
  :CUSTOM_ID: editName
  :END:   
#+NAME: edit_name
#+BEGIN_SRC python 
def editName(name):
	name = name.lower()
	newName = re.sub(r'[^a-zA-Z0-9\s+-]', '', name)
	newName = newName.strip()
	finalName = re.sub('\s+', '-', newName)
	return finalName

#+END_SRC


** Insert Ids
   Using BeautifulSoup, a parse tree is obtained making it easy to search and
   insert into the tree
  :PROPERTIES:
  :CUSTOM_ID: addHooks
  :END:   
#+NAME: add_hooks
#+BEGIN_SRC python :tangle add-ids.py
def addHooks(jsonIds, labDirPath):#files, expPath, labName, expName):
        expNameList = listdir(join(labDirPath,'src'))
        for e in expNameList:
                for d in jsonIds.get('experiments'):
                      if e == editName(d.get('name')):
                              idList = d.get('subsections')
                              for i in idList:
                                  try:
                                      keys = i.keys()
                                      values = i.values()
                                  except:
                                      raise Exception('Corrupt json object retrival')
                                  fileName = editName(keys[0])+'.html'
                                  ptree = BeautifulSoup(open(join(labDirPath, join('src', join(e, fileName)))))
                                  headList = ptree.find_all(re.compile("^h[0-9]$"))
                                  for h in headList:
                                        h['id'] = values[0]
                                  pList = ptree.find_all('p')
                                  for p in pList:
                                        p['id'] = values[0]+'-content'
                                  new_html_content = ptree.prettify()
                                  fp = open(join(labDirPath, join('src', join(e, fileName))), 'w+')
                                  fp.write(new_html_content)
                                  fp.close()

#+END_SRC


** Config
This section is for testing purpose on local machine, remove this section once
Lab Data Services are deployed.
config/config.py should have URL variable to be set to server address that
servers resource-ids
#+BEGIN_SRC python :tangle config/config.py
URL = 'http://127.0.0.1:5000/'

#+END_SRC

#+BEGIN_SRC python :tangle config/__init__.py

#+END_SRC


** Send Request
fetches the resource-ids in json object form of following form
#+BEGIN_EXAMPLE
dictonary = {"experiments": [{"id": "Intro", "name": "Introduction",
                         "subsections": [{"Introduction": "id1"}
                                         ]},
                         {"id": "E99709", "name": "Word Analysis",
                         "subsections": [{"Introduction": "id1"},
                                         {"Theory": "id2"},
                                         {"Objective": "id3"},
                                         {"Experiment": "id4"},
                                         {"Quizzes": "id5"},
                                         {"Procedure": "id6"},
                                         {"Further Readings": "id7"},
                                         {"Feedback": "id8"}
                                         ]},
                          {"id": "E99708", "name": "Word Generation",
                         "subsections": [{"Introduction": "id1"},
                                         {"Theory": "id2"},
                                         {"Objective": "id3"},
                                         {"Experiment": "id4"},
                                         {"Quizzes": "id5"},
                                         {"Procedure": "id6"},
                                         {"Further Readings": "id7"},
                                         {"Feedback": "id8"}
                                         ]}]
}

#+END_EXAMPLE
#+NAME: send_request
#+BEGIN_SRC python 
def sendRequest(url):
        try:
            jstr = requests.get(url)
        except Exception as error:
            print ('Error: '+str(error))
        j = json.loads(jstr.content)
        return j
        

#+END_SRC


* Execution
sending request to server by concatinating labId to server address
#+NAME: main_process
#+BEGIN_SRC python
if __name__ == '__main__':
	try:
		labDirPath = sys.argv[1]
                jsonPath = sys.argv[2]
	except Exception as error:
		print('Error: '+str(error))
        with open(jsonPath) as data_file:
		data = json.load(data_file)
     	labId = data.get('course').get('id')
        newURL = URL + labId
        jsonIds = sendRequest(newURL)
        addHooks(jsonIds, labDirPath)

#+END_SRC


* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from bs4 import BeautifulSoup
from os import listdir
from os.path import isfile, join, splitext
import sys, json, re, requests
from config.config import URL

#+end_src


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle hooks.py :eval no :noweb yes
<<imports_for_sources>>
<<edit_name>>
<<create_folder>>
<<send_request>>
<<add_hooks>>
<<main_process>>
#+end_src


