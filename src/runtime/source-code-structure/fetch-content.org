#+TITLE: Source Code Structure generator
#+AUTHOR: VLEAD
#+DATE:  [2016-12-15 Thu]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document adds ajax hooks into empty html files that are generated by
  platform specific skeletal structure generator. To make ajax call to content
  server resource-ids are needed which are requested from Lab Data
  Services. This code takes 2 inputs
1) lab Id
2) Path to Directory which holds all empty html files
* Implementation
** imports
#+BEGIN_SRC python :tangle fetch-content.py
import sys, requests, json, os, re
from config.config import URL
from bs4 import BeautifulSoup
#+END_SRC

** Send Request
This function is used to send any sort of requests
#+BEGIN_SRC python :tangle fetch-content.py
def sendRequest(url):
        try:
            jstr = requests.get(url)
        except Exception as error:
            print ('Error: '+str(error))
        j = json.loads(jstr.content)
        return j

#+END_SRC

** Edit Name
   Edits string to maintain consistency.
#+BEGIN_SRC python :tangle fetch-content.py
def editName(name):
	name = name.lower()
	newName = re.sub(r'[^a-zA-Z0-9\s+-]', '', name)
	newName = newName.strip()
	finalName = re.sub('\s+', '-', newName)
	return finalName

#+END_SRC 
** Edit Html File
   This function edits html file, adds ajax call and proper html tags to hold
   the retrieved data
   Server-side script must have '/req/<Id>' route which will serve absolute
   path of res-Id.  
   HTML content being written has javascript part that makes ajax call
   currently to http://localhost , this should point to content server which
   will respond with absolute path resource location for requested resource-id 
#+BEGIN_SRC python :tangle fetch-content.py
def editHtmlFile(fileName, htmlDirPath, resId, subSecName):
	filePath = os.path.join(htmlDirPath,fileName)
        contentFileName = editName(fileName)
	sname = editName(subSecName)
	finalFileName = resId+'-'+sname+'.html'
	try:
            fp = open(filePath, 'w+')
        except Exception as error:
            print ('Error: '+str(error))
	newUrl = URL + 'req/' + resId
	r = requests.get(newUrl)
	absPath = r.content
	html_boiler_plate = """
        <!DOCTYPE html>
        <html>
        <script>
        function loadDoc() {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
        document.getElementById("demo").innerHTML = this.responseText;
        }
        };
        var url = "%sreq/%s"
        xhttp.open("GET", url, true);
        xhttp.send();
        }
        </script>
        <body onload="loadDoc()">
        <object width="4000" height="4000" data="http://localhost/%s">
        </object>
        </body>
        </html>""" % (URL, resId ,finalFileName)
        sp = BeautifulSoup(html_boiler_plate)
        html_boiler_plate = sp.prettify()
	fp.write(html_boiler_plate)
	fp.close()


#+END_SRC

** Align Html File to Resource-Id
   This function aligns html file and its proper resource-id
#+BEGIN_SRC python :tangle fetch-content.py
def alignFileToId(labspec, htmlDirPath):
	allFiles = os.listdir(htmlDirPath)
	htmlFiles = [f for f in allFiles if 'l.html' in f]
	exps = labspec.get('experiments')
	for f in htmlFiles:
		ref = f.replace('_', ' ')
		for e in exps:
			expName = e.get('name')
			subsections = e.get('subsections')
			for k in subsections:
				subSecName = k.keys()[0]
				resId = k.values()[0]
				if subSecName in ref and expName in ref:
					editHtmlFile(f, htmlDirPath, resId, subSecName)

#+END_SRC

* Execution
  Input is lab-Id and path to directory with html files.
  Requested detailed labSpec(with Resource-ids) is expected to be of following format
#+BEGIN_EXAMPLE
{
        "course": {"org": "iiith","id": "cse24", "display_name": "Natural Language Processing"},
        "overview": "Natural Language Processing Lab",
        "experiments": [
                         {"id": "E99709", "name": "Word Analysis",
                         "subsections": [{"Introduction": "res-id2"},
                                         {"Theory": "res-id3"},
                                         {"Objective": "res-id4"},
                                         {"Experiment": "res-id5"},
                                         {"Quizzes": "res-id6"},
                                         {"Procedure": "res-id7"},
                                         {"Further Readings": "res-id8"},
                                         {"Feedback": "res-id9"}
                                         ]}]
}

#+END_EXAMPLE

#+BEGIN_SRC python :tangle fetch-content.py
if __name__ == '__main__':
        if len(sys.argv) == 3:
	     labId = sys.argv[1]
	     htmlDirPath = sys.argv[2]
	     newURL = URL + labId
	     detailedLabSpec = sendRequest(newURL)
	     filemap = alignFileToId(detailedLabSpec, htmlDirPath)
        else:
             print "Usage: python <fetch-content.py> <lab-Id> <DirPath to all empty HTML files>"

#+END_SRC
