#+TITLE: Map                                                         
#+AUTHOR: VLEAD                                                                   
#+DATE: <2016-12-13 Tue>
                                            
#+Setupfile: ./org-templates/level-0.org                                   
#+TAGS: boilerplate(b)                                                            
#+EXCLUDE_TAGS: boilerplate                                                       
#+OPTIONS: ^:nil

* Introduction
  Creating a map of resource-ids to resource filename, and sends resource file
along with resource-id to server where map is created dynamically
This code takes 2 inputs
1) Experiment Id
2) Experiment directory path
Also prepends resource filename with resource Id.

* Implementation
** import

#+BEGIN_SRC python :tangle map.py
from config.config import URL
import requests, sys, json, re
from os.path import join, splitext
from os import rename, chdir, listdir
#+END_SRC
** Send Request
   Sends request to server and fetches proper json object, which is expected to
   be of the following format. These are details of experiment with Id E99709 and name Word Analysis
#+BEGIN_EXAMPLE
{"id": "E99709", "name": "Word Analysis",
                         "subsections": [{"Introduction": "id1"},
                                         {"Theory": "id2"},
                                         {"Objective": "id3"},
                                         {"Experiment": "id4"},
                                         {"Quizzes": "id5"},
                                         {"Procedure": "id6"},
                                         {"Further Readings": "id7"},
                                         {"Feedback": "id8"}
                                         ]}

#+END_EXAMPLE

#+BEGIN_SRC python :tangle map.py
def sendRequest(url):
        try:
            jstr = requests.get(url)
        except Exception as error:
            print ('Error: '+str(error))
        j = json.loads(jstr.content)
        return j

#+END_SRC
** Edit Name
Removes all non-alphanumeric characters and replaces spaces with hyphen
#+BEGIN_SRC python :tangle map.py
def editName(name):
	name = name.lower()
	newName = re.sub(r'[^a-zA-Z0-9\s+-]', '', name)
	newName = newName.strip()
	finalName = re.sub('\s+', '-', newName)
	return finalName

#+END_SRC
** Creating Map
Locates resource-id and its corresponding resource-file, sends html file to
server along with its resource-id where a map is created dynamically. 
Resource names are renamed to following format.
#+BEGIN_EXAMPLE
<res-id>-<subsection-name>.html
#+END_EXAMPLE

#+BEGIN_SRC python :tangle map.py
def createMap(jsResIds, expDirPath):
        map = {}      
        chdir(expDirPath)
        listResId = jsResIds.get('subsections')
        files = listdir(expDirPath)
        for res in listResId:
              for f in files:
                  try:
                      name = res.keys()[0]
                      resId = res.values()[0]
                  except Exception as error:
                      print ('Error: '+str(error) + ' Data with inconsistent format retrieved')
                  properName = editName(name)
                  fileName, ext = splitext(f)
                  if fileName == properName:
                       map[resId] = resId +'-'+ f
                       newFileName = resId +'-'+ f
                       rename(f, newFileName)
                       newUrl = URL + 'upload'
                       filePath = join(expDirPath, newFileName)
                       response = requests.post(newUrl, files={'file':(newFileName, open(filePath, 'rb'))}, data={resId:newFileName})
        return map
#+END_SRC
* Execution

#+BEGIN_SRC python :tangle map.py
if __name__ == "__main__":
        if len(sys.argv) != 3:
              print "Usage : python <map.py> <ExpId (string)> <Experiment Directory Path>"
        else:
              expId = sys.argv[1]
              expDirPath = sys.argv[2]
              newURL = URL + expId
              resIds = sendRequest(newURL)
              map = createMap(resIds, expDirPath)
              
                
#+END_SRC
