#+TITLE: Map                                                         
#+AUTHOR: VLEAD                                                                   
#+DATE: <2016-12-13 Tue>
                                            
#+Setupfile: ./org-templates/level-0.org                                   
#+TAGS: boilerplate(b)                                                            
#+EXCLUDE_TAGS: boilerplate                                                       
#+OPTIONS: ^:nil

* Introduction
  This document illustrates creation a map of resource-ids to resource filename, and sends resource file
  along with resource-id to server where map is created dynamically
  This code takes 2 inputs
  1) Experiment Id
  2) Experiment directory path
  Before saving uploaded file it also prepends resource filename with resource Id.


* Main process
  Main process of this code requests Lab Data Services with experiment-id,
  expecting resource-ids of corresponding experiment. Experiment Directory Path
  helps in searching resource-files(HTML files), after searching resource-file
  with specific resource-id it is uploaded to content-server and a map between
  this resource-file location and its resource-id is maintained.
#+NAME: main_process
#+BEGIN_SRC python 
if __name__ == "__main__":
    if len(sys.argv) != 3:
        print "Usage : python <map.py> <ExpId (string)> <Experiment Directory Path>"
    else:
        exp_id = sys.argv[1]
        exp_dir_path = sys.argv[2]
        newURL = URL + exp_id
        res_ids = send_request(newURL)
        create_map(res_ids, exp_dir_path)
                              
#+END_SRC


* Implementation

** Send Request
   Sends request to LDS-server and fetches proper json object, which is expected to
   be of the following format. These are details of experiment with Id E99709 and name Word Analysis
#+BEGIN_EXAMPLE
{"id": "E99709", "name": "Word Analysis",
                         "subsections": [{"Introduction": "id1"},
                                         {"Theory": "id2"},
                                         {"Objective": "id3"},
                                         {"Experiment": "id4"},
                                         {"Quizzes": "id5"},
                                         {"Procedure": "id6"},
                                         {"Further Readings": "id7"},
                                         {"Feedback": "id8"}
                                         ]}

#+END_EXAMPLE

#+NAME: send_request
#+BEGIN_SRC python 
def send_request(url):
    try:
        jstr = requests.get(url)
        j = json.loads(jstr.content)
        return j
    except Exception as error:
        print ('Error: '+str(error))

#+END_SRC


** Edit Name
Removes all non-alphanumeric characters and replaces spaces with hyphen
#+NAME: sanitize_name
#+BEGIN_SRC python
def edit_name(name):
	name = name.lower()
	new_name = re.sub(r'[^a-zA-Z0-9\s+-]', '', name)
	new_name = new_name.strip()
	final_name = re.sub('\s+', '-', new_name)
	return final_name

#+END_SRC


** Creating Map
   Locates resource-id and its corresponding resource-file, sends html file to
   server along with its resource-id where a map is created dynamically. 
   Resource names are renamed to following format.
#+BEGIN_EXAMPLE
<res-id>-<subsection-name>.html

#+END_EXAMPLE

Earlier format was as follows
#+BEGIN_EXAMPLE
<subsection-name>.html

#+END_EXAMPLE

#+NAME: create_map
#+BEGIN_SRC python
def create_map(js_res_ids, exp_dir_path):
    map = {}      
    chdir(exp_dir_path)
    list_res_id = js_res_ids.get('subsections')
    files = listdir(exp_dir_path)
    for res in list_res_id:
        for f in files:
            try:
                name = res.keys()[0]
                res_id = res.values()[0]
                proper_name = edit_name(name)
                file_name, ext = splitext(f)
                if file_name == proper_name:
                    map[res_id] = res_id +'-'+ f
                    new_file_name = res_id +'-'+ f
                    rename(f, new_file_name)
                    new_url = URL + 'upload'
                    file_path = join(exp_dir_path, new_file_name)
                    response = requests.post(new_url, files={'file':(new_file_name, open(file_path, 'rb'))}, data={res_id:new_file_name})
            except Exception as error:
                print ('Error: '+str(error) + ' Data with inconsistent format retrieved')
            
#+END_SRC




* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from config.config import URL
import requests, sys, json, re
from os.path import join, splitext
from os import rename, chdir, listdir

#+end_src



* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle map.py :eval no :noweb yes
<<imports_for_sources>>
<<send_request>>
<<sanitize_name>>
<<create_map>>
<<main_process>>
#+end_src


