#+TITLE: OpenedX Course Structure generator 
#+AUTHOR: VLEAD
#+DATE:  [2016-06-30 Wed]  
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
   This document demonstrates the creation of a skeletal structure for a lab in
   the format expected by Open edX platform from a lab specification.

* How to generate OpenedX structure? 
- Step 1 :: Create a directory with the lab name (all letters in lower-case
     with hyphens) which is to be ported on Open edX.  
- Step 2 :: The =labspec.json= file need to created and place inside the lab
     directory.  Please refer to the example [[https://github.com/vlead/lab-specifications/blob/master/IIIT-Hyderabad/artificial-neural-networks-labspec.json][labspec.json]] file
- Step 3 :: Run the following command to generate the OpenedX Structure
#+BEGIN_EXAMPLE
git clone https://github.com/vlead/vlabs-platform.git
cd vlabs-platform/
make
cd build/code/runtime/open-edx-structure
python automation.py <absolute-path-to-lab-directory> 
#+END_EXAMPLE
- Step 4 :: Compress the lab directory into a tar.gz file using command 
#+BEGIN_EXAMPLE
cd ..
tar -cvzf name-of-archive.tar.gz <path-to-lab-directory>
#+END_EXAMPLE
- Step 5 :: Create a course in Open edX Studio and import the compressed tar.gz
     lab directory to course that is created in Open edX studio.

* Implementation of Open edX Structure Genarator 
** Directory Structure
   Represent the directory structure of Open edX lab with a list containing all
   the directories.
#+BEGIN_SRC python :tangle automation.py
import os, sys, json

LAB_DIRECTORY_STRUCTURE = [
    {'name': 'about', 'isDir': True, 'files': ['overview.html']},
    {'name': 'chapter', 'isDir': True, 'files': []},
    {'name': 'combinedopenended', 'isDir': True, 'files': []},
    {'name': 'course', 'isDir': True, 'files': []},
    {'name': 'discussion', 'isDir': True, 'files': []},
    {'name': 'drafts', 'isDir': True, 'files': []},
    {'name': 'html', 'isDir': True, 'files': []},
    {'name': 'info', 'isDir': True, 'files': []},
    {'name': 'peergrading', 'isDir': True, 'files': []},
    {'name': 'policies', 'isDir': True, 'files': []},
    {'name': 'problem', 'isDir': True, 'files': []},
    {'name': 'sequential', 'isDir': True, 'files': []},
    {'name': 'static', 'isDir': True, 'files': []},
    {'name': 'tabs', 'isDir': True, 'files': []},
    {'name': 'vertical', 'isDir': True, 'files': []},
    {'name': 'video', 'isDir': True, 'files': []},
    {'name': 'videoalpha', 'isDir': True, 'files': []},
    {'name': 'course.xml', 'isDir': False}
]

#+END_SRC
** Dirctory Generator
   This function take the =labpath= as an argument and create the directories
   mentioned in the directory structure if the =labpath= exists.
#+BEGIN_SRC python :tangle automation.py 
def directoryGenerator(labpath):
    print "Generating..."
    if not os.path.exists(labpath):
        os.makedirs(labpath)
        
    os.chdir(labpath)
    
    for i in LAB_DIRECTORY_STRUCTURE:
        if i['isDir']:
            os.mkdir(i['name'])
            if i['files'] != []:
                os.chdir(i['name'])
                for f in i['files']:
                    open(f, 'w').close()
                os.chdir('..')
        else:
            open(i['name'], 'w').close()
            
    os.chdir('..')
    print "Completed Generating!"

#+END_SRC
** Lab Structure Generator
   This function take the =labpath= as an argument and generates the structure of
   a lab based on the details mentioned in =labspec.json=

#+BEGIN_SRC python :tangle automation.py  
def labStructureGenerator(labpath):
    os.chdir(labpath)
    labspec = json.loads(open('labspec.json', 'r').read())
    print os.getcwd()

    course = open('course.xml', 'w')
    course_data = labspec['course']
    course.write('<course url_name="%s" org="%s" course="%s"/>'\
                     %(course_data['id'], course_data['org'], \
                           course_data['id']))

    os.chdir('about')

    overview = open('overview.html', 'w')
    overview_data = """<section class="about">
  <h2>About This Course</h2>
  <p> %s </p>
</section>""" % labspec['overview']

    overview.write(overview_data)
    os.chdir('..')

    os.chdir('course')
    experiments_list = labspec['experiments']
    experiments_metadata = """ """
    for experiment in experiments_list:
        experiments_metadata = experiments_metadata + \
          ('\n  <chapter url_name="%s"/>' \
               % experiment['name'].replace(" ","_"))
        os.chdir('../chapter')
        experiment_file = open(experiment['name'].replace(" ", "_") +\
                                   '.xml', 'w')

        subsection_metadata = """ """
        for subsection in experiment['subsections']:
            subsection_metadata = subsection_metadata + \
              '\n  <sequential url_name="%s"/>' \
              % (experiment['name'].replace(" ","_")+"_"+\
                     subsection['name'].replace(" ","_"))
            os.chdir('../sequential')
            subsection_file = open(experiment['name'].replace(" ","_") +\
                                       "_" + \
                                       subsection['name'].replace(" ","_") + \
                                       '.xml', 'w')
            subsection_vertical_data = """<sequential display_name="%s">
  <vertical url_name="%s"/>
</sequential>""" % (subsection['name'], experiment['name'].replace(" ","_")+\
                        "_"+subsection['name'].replace(" ","_") + "_" + "Unit")
            subsection_file.write(subsection_vertical_data)
            subsection_file.close()
            os.chdir('../vertical')
            unit_file = open(experiment['name'].replace(" ","_") + "_" + \
                                 subsection['name'].replace(" ","_") +\
                                 "_Unit.xml",'w')
            unit_file_data = """<vertical display_name="%s">
  <html url_name="%s"/>
</vertical>""" % ("Unit", experiment['name'].replace(" ","_")+"_"+\
                      subsection['name'].replace(" ","_") + "_Unit_html")
            unit_file.write(unit_file_data)
            unit_file.close()
            os.chdir('../html')
            unit_file_xml = open(experiment['name'].replace(" ","_")+\
                                     "_"+subsection['name'].replace(" ","_") +\
                                     "_Unit_html.xml",'w')
            unit_file_html = open(experiment['name'].replace(" ","_")+"_"+\
                                      subsection['name'].replace(" ","_") +\
                                      "_Unit_html.html",'w')
            unit_file_html.write("<h2>%s</h2>"%subsection['name'])
            unit_file_html.close()
            unit_file_xml_data =  """<html file_name="%s" filename="%s"/>""" \
              % (experiment['name'].replace(" ","_")+"_"+\
                     subsection['name'].replace(" ","_") + "_Unit_html",
                     experiment['name'].replace(" ","_")+"_"+\
                     subsection['name'].replace(" ","_") + "_Unit_html")
            unit_file_xml.write(unit_file_xml_data)
            unit_file_xml.close()
            os.chdir('../chapter')

        subsection_data = """<chapter display_name="%s">%s
</chapter>""" % (experiment['name'], subsection_metadata)
        experiment_file.write(subsection_data)
        experiment_file.close()
        os.chdir('../course')

    experiments_data = """<course display_name="%s">%s
</course>""" % (course_data['display_name'], experiments_metadata)

    experiments = open(course_data['id']+'.xml', 'w')
    experiments.write(experiments_data)
    experiments.close()
    os.chdir('..')
#+END_SRC
** Lab Generator
   This function takes the =labpath= as an argument and creates the directory
   and lab structures based on the given =labspec.json= file
#+BEGIN_SRC python :tangle automation.py   
def generateLab(labpath):
    os.chdir(labpath)
    if os.path.isfile('labspec.json'):
        directoryGenerator(labpath)
        labStructureGenerator(labpath)
    else:
        print "Place a labspec.json file in the lab folder and"\
          "give the absolute path of the lab folder"

#+END_SRC
** Main 
#+BEGIN_SRC python :tangle automation.py    
if __name__ == '__main__':
    if len(sys.argv) != 2:
        print "Usage : python <Automation-Script> <Absolute Path of lab>"
    else:
        generateLab(sys.argv[1])
#+END_SRC


